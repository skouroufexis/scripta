{"remainingRequest":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/stavros/Documents/web/diary/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/stavros/Documents/web/diary/src/components/Footer.vue?vue&type=template&id=40ab164b&","dependencies":[{"path":"/Users/stavros/Documents/web/diary/src/components/Footer.vue","mtime":1612792219885},{"path":"/Users/stavros/Documents/web/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIGZvb3RlciIgfSwgWwogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgX3ZtLm1lbnVOdW1iZXIgPT0gMgogICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJmb290ZXJfYnV0dG9uX29wZW5BY3Rpb25zIiB9LAogICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5vcGVuQWN0aW9ucyB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLXBsdXMtY2lyY2xlIiB9KV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICA6IF92bS5fZSgpLAogICAgICBfdm0ubWVudU51bWJlciAhPSAyCiAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgW192bS5fbSgwKV0pCiAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciLCBhdHRyczogeyBpZDogImFjdGlvbnNDb250YWluZXIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sLTEyIiwKICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJmb290ZXJfYnV0dG9uX2Nsb3NlQWN0aW9ucyIgfSwKICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5jbG9zZUFjdGlvbnMgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtY2FyZXQtZG93biIgfSldCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImZvb3Rlcl9idXR0b25fYWN0aW9ucyIsCiAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZm9vdGVyX2J1dHRvbkF0dGFjaG1lbnQiIH0sCiAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ub3BlbkF0dGFjaG1lbnQgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvYXR0YWNobWVudC5wbmciKSwKICAgICAgICAgICAgICAgIGFsdDogImF0dGFjaG1lbnQgaWNvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImZvb3Rlcl9idXR0b25DbGVhciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZm9vdGVyX2J1dHRvbkNsZWFyQXR0YWNobWVudCIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmRldGFjaEZpbGUoMSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFyIGZhLXRyYXNoLWFsdCIgfSldCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImZvb3Rlcl9idXR0b25fYWN0aW9ucyIsCiAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZm9vdGVyX2J1dHRvbkRvc3NpZXIiIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vcGVuRG9zc2llclRhZ3MoMSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2Rvc3NpZXIyLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiYWRkIHRvIGRvc3NpZXIgaWNvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImZvb3Rlcl9idXR0b25DbGVhciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZm9vdGVyX2J1dHRvbkNsZWFyRG9zc2llciIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmRldGFjaEZpbGUoMikKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFyIGZhLXRyYXNoLWFsdCIgfSldCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImZvb3Rlcl9idXR0b25fYWN0aW9ucyIsCiAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZm9vdGVyX2J1dHRvblRhZ3MiIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vcGVuRG9zc2llclRhZ3MoMikKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvdGFnLnBuZyIpLCBhbHQ6ICJ0YWcgaWNvbiIgfQogICAgICAgICAgICB9KQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb290ZXJfYnV0dG9uQ2xlYXIiLAogICAgICAgICAgICBhdHRyczogeyBpZDogImZvb3Rlcl9idXR0b25DbGVhclRhZ3MiIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS5kZXRhY2hGaWxlKDMpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhciBmYS10cmFzaC1hbHQiIH0pXQogICAgICAgICksCiAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgc3RhdGljU3R5bGU6IHsgZGlzcGxheTogIm5vbmUiIH0sCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICB0eXBlOiAiZmlsZSIsCiAgICAgICAgICAgIGlkOiAiYXR0YWNobWVudCIsCiAgICAgICAgICAgIGFjY2VwdDogIi5wbmcsLmpwZWcsLmpwZywucGRmLC5tcDQiCiAgICAgICAgICB9LAogICAgICAgICAgb246IHsgY2hhbmdlOiBfdm0uYXR0YWNoRmlsZSB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiwgYXR0cnM6IHsgaWQ6ICJmb290ZXJNZW51Q29udGFpbmVyIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImZvb3Rlcl9idXR0b25fbWFpbiIsCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS5uYXZpZ2F0ZSgxLCAiQXBwbGljYXRpb24gdGl0bGUiKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9ob21lLnBuZyIpLCBhbHQ6ICJob21lIGljb24iIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9vdGVyX2J1dHRvbl9tYWluIiwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm5hdmlnYXRlKDIsICJBZGQgbmV3IG5vdGUiKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9wZW4ucG5nIiksIGFsdDogInBlbiBpY29uIiB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImZvb3Rlcl9idXR0b25fbWFpbiIsCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS5uYXZpZ2F0ZSgzLCAiTXkgZG9zc2llcnMiKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvZG9zc2llcjEucG5nIiksCiAgICAgICAgICAgICAgICBhbHQ6ICJkb3NzaWVyIGljb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb290ZXJfYnV0dG9uX21haW4iLAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfdm0ubmF2aWdhdGUoNCwgIkNhbGVuZGFyIikKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2NhbGVuZGFyLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiY2FsZW5kYXIgaWNvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJmb290ZXJfZG9zc2llck1vZGFsIiB9IH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX3ZtLl9tKDEpLAogICAgICAgICAgICBfdm0uX20oMiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJyb3ciLCBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIxJSIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtOSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjQwcHgiIH0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6ICJmb290ZXJfaW5wdXREb3NzaWVyTmFtZSIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiZG9zc2llciBuYW1lIiwKICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg6ICIzMCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRvZ2dsZVNldEJ1dHRvbigxKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAga2V5dXA6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5xdWVyeVJlY2VudCgxKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbCBidXR0b25fc2Vjb25kYXJ5IiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWxlZnQiOiAiMSUiIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJidXR0b25BZGREb3NzaWVyIiwgZGlzYWJsZWQ6ICIiIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5hZGREb3NzaWVyIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiYWRkIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicm93Iiwgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiMSUiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbC0yIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImZvb3Rlcl9idXR0b25Bc3NpZ25Eb3NzaWVyIiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2V0RG9zc2llciB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtY2FyZXQtZG93biIgfSldCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMSBidXR0b25fY2FuY2VsIiwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsb3NlRG9zc2llclRhZ3MoMSkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoImNhbmNlbCIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJmb290ZXJfdGFnc01vZGFsIiB9IH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgICBfdm0uX20oNCksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJyb3ciLCBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIxJSIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtOSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjQwcHgiIH0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6ICJmb290ZXJfaW5wdXRUYWdOYW1lIiwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJ0YWciLAogICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aDogIjMwIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udG9nZ2xlU2V0QnV0dG9uKDIpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBrZXl1cDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnF1ZXJ5UmVjZW50KDIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sIGJ1dHRvbl9zZWNvbmRhcnkiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICIxJSIgfSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImJ1dHRvbkFkZFRhZ3MiLCBkaXNhYmxlZDogIiIgfSwKICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFkZFRhZyB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoImFkZCIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInJvdyIsIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjElIiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJmb290ZXJfYnV0dG9uQXNzaWduVGFncyIgfSwKICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnNldFRhZ3MgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWNhcmV0LWRvd24iIH0pXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sIGJ1dHRvbl9jYW5jZWwiLAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2xvc2VEb3NzaWVyVGFncygyKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiY2FuY2VsIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJidXR0b24iLCB7IGF0dHJzOiB7IGlkOiAiZm9vdGVyX2J1dHRvbl93aGl0ZVNwYWNlIiB9IH0sIFsKICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLXBsdXMtY2lyY2xlIiB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX2MoImRpdiIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImNvbnRhaW5lciIsCiAgICAgICAgYXR0cnM6IHsgaWQ6ICJmb290ZXJfZG9zc2llclJlc3VsdHNDb250YWluZXIiIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgeyBzdGF0aWNDbGFzczogInJvdyIsIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjElIiB9IH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtMTIiLAogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJmb290ZXJfYWRkZWREb3NzaWVyIiB9CiAgICAgICAgfSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICBfYygiZGl2IiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiwKICAgICAgICBhdHRyczogeyBpZDogImZvb3Rlcl90YWdzUmVzdWx0c0NvbnRhaW5lciIgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAicm93Iiwgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiMSUiIH0gfSwKICAgICAgW19jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTEyIiwgYXR0cnM6IHsgaWQ6ICJmb290ZXJfYWRkZWRUYWdzIiB9IH0pXQogICAgKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}
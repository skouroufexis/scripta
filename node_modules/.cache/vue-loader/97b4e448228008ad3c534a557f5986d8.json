{"remainingRequest":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/stavros/Documents/web/diary/node_modules/vue-functional-calendar/src/components/FunctionalCalendar.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/stavros/Documents/web/diary/node_modules/vue-functional-calendar/src/components/FunctionalCalendar.vue","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQpAaW1wb3J0ICcuLi9hc3NldHMvc2Nzcy9jYWxlbmRhci5zY3NzJzsNCi5yYW5nZUNsZWFuZXIgew0KICBwYWRkaW5nOiA1cHggMCAxMHB4Ow0KICBkaXNwbGF5OiBmbGV4Ow0KICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgc3BhbiB7DQogICAgY29sb3I6IHdoaXRlOw0KICAgIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgcGFkZGluZzogNXB4Ow0KICAgICYuYWN0aXZlIHsNCiAgICAgICY6aG92ZXIgew0KICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGY4YTllOw0KICAgICAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgICB9DQogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjZiM2NjOw0KICAgIH0NCiAgICAmLmRpc2FibGVkIHsNCiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNDgsIDE0OCwgMTQ4KTsNCiAgICB9DQogIH0NCn0NCg=="},{"version":3,"sources":["FunctionalCalendar.vue"],"names":[],"mappingsqoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FunctionalCalendar.vue","sourceRoot":"node_modules/vue-functional-calendar/src/components","sourcesContent":["<template>\r\n  <div class=\"vfc-popover-container\" ref=\"popoverElement\" tabindex=\"0\">\r\n    <PickerInputs\r\n      :fConfigs=\"fConfigs\"\r\n      :singleSelectedDate=\"singleSelectedDate\"\r\n      :calendar=\"calendar\"\r\n    >\r\n      <template v-slot:dateRangeInputs=\"props\">\r\n        <slot\r\n          :startDate=\"props.startDate\"\r\n          :endDate=\"props.endDate\"\r\n          :isTypeable=\"fConfigs.isTypeable\"\r\n          name=\"dateRangeInputs\"\r\n        >\r\n        </slot>\r\n      </template>\r\n      <template v-slot:datePickerInput=\"props\">\r\n        <slot\r\n          :selectedDate=\"props.selectedDate\"\r\n          :isTypeable=\"fConfigs.isTypeable\"\r\n          name=\"datePickerInput\"\r\n        >\r\n        </slot>\r\n      </template>\r\n    </PickerInputs>\r\n\r\n    <div\r\n      class=\"vfc-main-container\"\r\n      v-show=\"showCalendar\"\r\n      ref=\"mainContainer\"\r\n      :class=\"{\r\n        'vfc-modal':\r\n          fConfigs.isModal &&\r\n          (fConfigs.isDatePicker ||\r\n            fConfigs.isDateRange ||\r\n            fConfigs.isMultipleDatePicker),\r\n        'vfc-dark': fConfigs.isDark\r\n      }\"\r\n    >\r\n      <time-picker\r\n        v-if=\"showTimePicker\"\r\n        ref=\"timePicker\"\r\n        :height=\"$refs.popoverElement.clientHeight\"\r\n      ></time-picker>\r\n\r\n      <template v-else>\r\n        <div class=\"vfc-calendars-container\">\r\n          <Arrows\r\n            :isMultiple=\"false\"\r\n            :fConfigs=\"fConfigs\"\r\n            :allowPreDate=\"allowPreDate\"\r\n            :allowNextDate=\"allowNextDate\"\r\n          >\r\n            <template v-slot:navigationArrowLeft>\r\n              <slot name=\"navigationArrowLeft\"></slot>\r\n            </template>\r\n            <template v-slot:navigationArrowRight>\r\n              <slot name=\"navigationArrowRight\"></slot>\r\n            </template>\r\n          </Arrows>\r\n\r\n          <div class=\"vfc-calendars\" ref=\"calendars\">\r\n            <div\r\n              class=\"vfc-calendar\"\r\n              v-for=\"(calendarItem, key) in listCalendars\"\r\n              :key=\"calendarItem.key\"\r\n            >\r\n              <month-year-picker\r\n                ref=\"monthContainer\"\r\n                :class=\"'vfc-' + fConfigs.titlePosition\"\r\n                :changeYearStep=\"changeYearStep\"\r\n                v-show=\"\r\n                  showMonthPicker === key + 1 || showYearPicker === key + 1\r\n                \"\r\n                :calendar-key=\"key\"\r\n              >\r\n              </month-year-picker>\r\n              <div class=\"vfc-content\">\r\n                <Arrows\r\n                  :isMultiple=\"true\"\r\n                  :fConfigs=\"fConfigs\"\r\n                  :allowPreDate=\"allowPreDate\"\r\n                  :allowNextDate=\"allowNextDate\"\r\n                  :calendar-key=\"key\"\r\n                >\r\n                  <template v-slot:navigationArrowLeft>\r\n                    <slot name=\"navigationArrowLeft\"></slot>\r\n                  </template>\r\n                  <template v-slot:navigationArrowRight>\r\n                    <slot name=\"navigationArrowRight\"></slot>\r\n                  </template>\r\n                </Arrows>\r\n\r\n                <transition tag=\"div\" :name=\"getTransition_()\" appear>\r\n                  <div\r\n                    class=\"vfc-top-date\"\r\n                    :class=\"'vfc-' + fConfigs.titlePosition\"\r\n                    v-if=\"checkHiddenElement('month')\"\r\n                  >\r\n                    <span\r\n                      @click.prevent=\"\r\n                        isNotSeparatelyAndFirst(key) && openMonthPicker(key + 1)\r\n                      \"\r\n                      :class=\"{\r\n                        'vfc-cursor-pointer vfc-underline':\r\n                          fConfigs.changeMonthFunction &&\r\n                          isNotSeparatelyAndFirst(key),\r\n                        'vfc-underline-active': showMonthPicker === key + 1\r\n                      }\"\r\n                    >\r\n                      {{ calendarItem.month }}</span\r\n                    >\r\n                    <span\r\n                      @click.prevent=\"\r\n                        isNotSeparatelyAndFirst(key) && openYearPicker(key + 1)\r\n                      \"\r\n                      :class=\"{\r\n                        'vfc-cursor-pointer vfc-underline':\r\n                          fConfigs.changeYearFunction &&\r\n                          isNotSeparatelyAndFirst(key),\r\n                        'vfc-underline-active': showYearPicker === key + 1\r\n                      }\"\r\n                    >\r\n                      {{ calendarItem.year }}\r\n                    </span>\r\n                  </div>\r\n                </transition>\r\n                <transition tag=\"div\" :name=\"getTransition_()\" appear>\r\n                  <div class=\"vfc-dayNames\">\r\n                    <span v-if=\"fConfigs.showWeekNumbers\"></span>\r\n                    <span\r\n                      v-for=\"(dayName, dayKey) in fConfigs.dayNames\"\r\n                      :key=\"key + dayKey + 1\"\r\n                      class=\"vfc-day\"\r\n                    >\r\n                      <template v-if=\"checkHiddenElement('dayNames')\">\r\n                        {{ dayName }}\r\n                      </template>\r\n                    </span>\r\n                  </div>\r\n                </transition>\r\n                <transition-group tag=\"div\" :name=\"getTransition_()\" appear>\r\n                  <div\r\n                    class=\"vfc-week\"\r\n                    v-for=\"(week, week_key) in calendarItem.weeks\"\r\n                    :key=\"key + week_key + 1\"\r\n                  >\r\n                    <WeekNumbers\r\n                      v-if=\"showWeekNumbers\"\r\n                      :number=\"week.number\"\r\n                      :borderColor=\"borderColor\"\r\n                    />\r\n                    <Day\r\n                      v-for=\"(day, day_key) in week.days\"\r\n                      ref=\"day\"\r\n                      :key=\"key + week_key + day_key + 1\"\r\n                      :isMultipleDateRange=\"isMultipleDateRange\"\r\n                      :day=\"day\"\r\n                      :fConfigs=\"fConfigs\"\r\n                      :calendar=\"calendar\"\r\n                      :helpCalendar=\"helpCalendar\"\r\n                      :week=\"week\"\r\n                      :day_key=\"day_key\"\r\n                      @dayMouseOver=\"dayMouseOver\"\r\n                    >\r\n                      <template v-slot:default=\"props\">\r\n                        <slot :week=\"props.week\" :day=\"props.day\"></slot>\r\n                      </template>\r\n                    </Day>\r\n                  </div>\r\n                  <template\r\n                    v-if=\"\r\n                      calendarItem.weeks.length < 6 &&\r\n                        !fConfigs.isLayoutExpandable\r\n                    \"\r\n                  >\r\n                    <!-- stabilizator -->\r\n                    <div\r\n                      style=\"height: 32.6px\"\r\n                      v-for=\"moreWeekKey in 6 - calendarItem.weeks.length\"\r\n                      :key=\"key + moreWeekKey + 'moreWeek'\"\r\n                    >\r\n                      &nbsp;\r\n                    </div>\r\n                  </template>\r\n                </transition-group>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Footer v-if=\"canClearRange || $slots['footer']\">\r\n            <template v-slot:footer>\r\n              <div @click=\"cleanRange\">\r\n                <slot name=\"cleaner\">\r\n                  <div\r\n                    v-if=\"canClearRange && fConfigs.isDateRange\"\r\n                    class=\"rangeCleaner\"\r\n                  >\r\n                    <span\r\n                      :class=\"[rangeIsSelected ? 'active' : 'disabled']\"\r\n                      @click=\"cleanRange\"\r\n                      >Clear Range{{ isMultipleDateRange && 's' }}</span\r\n                    >\r\n                  </div>\r\n                </slot>\r\n              </div>\r\n              <slot name=\"footer\"></slot>\r\n            </template>\r\n            <!-- <span>&nbsp;</span> -->\r\n          </Footer>\r\n        </div>\r\n      </template>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport helpCalendarClass from '../assets/js/helpCalendar'\r\nimport { propsAndData } from '../mixins/propsAndData'\r\nimport TimePicker from '../components/TimePicker'\r\nimport Arrows from '../components/Arrows'\r\nimport WeekNumbers from '../components/WeekNumbers'\r\nimport Day from '../components/Day'\r\nimport MonthYearPicker from '../components/MonthYearPicker'\r\nimport PickerInputs from '../components/PickerInputs'\r\nimport Footer from '../components/Footer'\r\n\r\nimport { hElContains, hUniqueID } from '../utils/helpers'\r\n// import calendarMethods from '../utils/calendarMethods'\r\n\r\nexport default {\r\n  name: 'FunctionalCalendar',\r\n  components: {\r\n    MonthYearPicker,\r\n    TimePicker,\r\n    PickerInputs,\r\n    Arrows,\r\n    Footer,\r\n    Day,\r\n    WeekNumbers\r\n  },\r\n  mixins: [propsAndData],\r\n  computed: {\r\n    startDMY() {\r\n      //start only with Day Month and Year\r\n      if (this.calendar.dateRange.start) {\r\n        return this.calendar.dateRange.start.split(' ')[0]\r\n      }\r\n      return ''\r\n    },\r\n    endDMY() {\r\n      //end only with Day Month and Year\r\n      if (this.calendar.dateRange.end) {\r\n        return this.calendar.dateRange.end.split(' ')[0]\r\n      }\r\n      return ''\r\n    },\r\n    rangeIsSelected() {\r\n      if (!this.isMultipleDateRange)\r\n        return !!(this.calendar.dateRange.end && this.calendar.dateRange.start)\r\n      return this.calendar.multipleDateRange.length > 0\r\n    },\r\n    helpCalendar() {\r\n      return new helpCalendarClass(\r\n        this.fConfigs.sundayStart,\r\n        this.checkHiddenElement('leftAndRightDays'),\r\n        this.fConfigs.dateFormat,\r\n        this.fConfigs.dayNames\r\n      )\r\n    },\r\n    singleSelectedDate: {\r\n      get() {\r\n        let res = ''\r\n        if (this.displayTimeInput) {\r\n          const validFormats = [\r\n            'HH:MM',\r\n            'HH:mm',\r\n            'hh:MM',\r\n            'hh:mm',\r\n            'MM:HH',\r\n            'mm:HH',\r\n            'MM:hh',\r\n            'mm:hh'\r\n          ]\r\n          let format = this.fConfigs.dateFormat\r\n          if (this.dateFormat) {\r\n            format = this.dateFormat\r\n          }\r\n          if (validFormats.indexOf(format.split(' ')[1]) > 3) {\r\n            res +=\r\n              ' ' +\r\n              [this.calendar.selectedHour, this.calendar.selectedMinute]\r\n                .reverse()\r\n                .join(':')\r\n          } else {\r\n            res +=\r\n              ' ' +\r\n              [this.calendar.selectedHour, this.calendar.selectedMinute].join(\r\n                ':'\r\n              )\r\n          }\r\n        }\r\n\r\n        return this.calendar.selectedDate\r\n          ? this.calendar.selectedDate + res\r\n          : ''\r\n      },\r\n      set(newValue) {\r\n        newValue = this.helpCalendar.mask(newValue)\r\n        if (this.helpCalendar.getDateFromFormat(newValue).getMonth()) {\r\n          this.calendar.selectedDate = newValue\r\n        }\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.setConfigs()\r\n    this.initCalendar()\r\n  },\r\n  mounted() {\r\n    //show time placeholder\r\n    if (this.displayTimeInput) {\r\n      const timeFormat = this.fConfigs.placeholder.split(' ')[1]\r\n      if (!timeFormat) {\r\n        this.fConfigs.placeholder += ' hh:mm'\r\n      }\r\n    }\r\n\r\n    this.popoverElement = this.$refs.popoverElement\r\n    // Event\r\n    this.popoverElement.addEventListener('focusin', this.onFocusIn)\r\n    this.popoverElement.addEventListener('focusout', this.onFocusOut)\r\n    window.addEventListener('click', this.hideMonthYearPicker, {\r\n      capture: true\r\n    })\r\n\r\n    // Reacts to external selected dates\r\n    this.$watch(\r\n      'value',\r\n      function(value) {\r\n        if (\r\n          typeof value === 'object' &&\r\n          (value.hasOwnProperty('dateRange') ||\r\n            value.hasOwnProperty('selectedDate'))\r\n        ) {\r\n          this.calendar = value\r\n        } else if (\r\n          typeof value === 'object' &&\r\n          value.hasOwnProperty('multipleDateRange')\r\n        ) {\r\n          this.calendar.multipleDateRange = value.multipleDateRange\r\n          const lastElement = this.calendar.multipleDateRange[\r\n            Math.max(0, this.calendar.multipleDateRange.length - 1)\r\n          ]\r\n          if (\r\n            lastElement &&\r\n            ((lastElement.start && !lastElement.end) ||\r\n              (!lastElement.start && lastElement.end))\r\n          ) {\r\n            throw new Error('Invalid Data Range')\r\n          }\r\n        }\r\n      },\r\n      { immediate: true, deep: true }\r\n    )\r\n\r\n    this.$watch(\r\n      'showCalendar',\r\n      function(value) {\r\n        if (value) this.$emit('opened')\r\n        else this.$emit('closed')\r\n      },\r\n      { immediate: true, deep: true }\r\n    )\r\n  },\r\n  beforeDestroy: function() {\r\n    window.removeEventListener('focusin', this.onFocusIn)\r\n    window.removeEventListener('focusout', this.onFocusOut)\r\n    window.removeEventListener('click', this.hideMonthYearPicker)\r\n  },\r\n  watch: {\r\n    fConfigs: {\r\n      handler() {\r\n        this.markChooseDays()\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    calendar: {\r\n      handler() {\r\n        this.markChooseDays()\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    'calendar.currentDate': {\r\n      handler(value) {\r\n        this.$emit('input', this.calendar)\r\n        this.checkLimits(value)\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    initCalendar() {\r\n      this.setCalendarData()\r\n      this.listRendering()\r\n      this.markChooseDays()\r\n      this.checkLimits(this.calendar.currentDate)\r\n    },\r\n    updateCalendar() {\r\n      this.setExistingCalendarData()\r\n      this.listRendering()\r\n      this.markChooseDays()\r\n    },\r\n    isNotSeparatelyAndFirst(key) {\r\n      return this.isSeparately || key == 0\r\n    },\r\n    setCalendarData() {\r\n      let date = this.calendar.currentDate\r\n      date = new Date(date.getFullYear(), date.getMonth() - 1)\r\n\r\n      this.listCalendars = []\r\n\r\n      for (let i = 0; i < this.fConfigs.calendarsCount; i++) {\r\n        date = new Date(date.getFullYear(), date.getMonth() + 1)\r\n\r\n        let calendar = {\r\n          key: i + hUniqueID(),\r\n          date: date,\r\n          dateTop: `${\r\n            this.fConfigs.monthNames[date.getMonth()]\r\n          } ${date.getFullYear()}`,\r\n          month: this.fConfigs.monthNames[date.getMonth()],\r\n          year: date.getFullYear(),\r\n          weeks: this.helpCalendar.getFinalizedWeeks(\r\n            date.getMonth(),\r\n            date.getFullYear()\r\n          )\r\n        }\r\n\r\n        this.listCalendars.push(calendar)\r\n\r\n        if (!this.fConfigs.isMultiple) {\r\n          break\r\n        }\r\n      }\r\n    },\r\n    setExistingCalendarData() {\r\n      for (let i = 0; i < this.listCalendars.length; i++) {\r\n        let calendar = this.listCalendars[i]\r\n        let date = calendar.date\r\n\r\n        this.$set(this.listCalendars, i, {\r\n          key: calendar.key,\r\n          date: date,\r\n          dateTop: `${\r\n            this.fConfigs.monthNames[date.getMonth()]\r\n          } ${date.getFullYear()}`,\r\n          month: this.fConfigs.monthNames[date.getMonth()],\r\n          year: date.getFullYear(),\r\n          weeks: this.helpCalendar.getFinalizedWeeks(\r\n            date.getMonth(),\r\n            date.getFullYear()\r\n          )\r\n        })\r\n\r\n        if (!this.fConfigs.isMultiple) {\r\n          break\r\n        }\r\n      }\r\n    },\r\n    setConfigs() {\r\n      let globalOptions\r\n      if (typeof this.$getOptions !== 'undefined') {\r\n        // Global Options\r\n        globalOptions = this.$getOptions()\r\n        Object.keys(globalOptions).forEach(objectKey => {\r\n          if (typeof this.fConfigs[objectKey] !== 'undefined') {\r\n            this.$set(this.fConfigs, objectKey, globalOptions[objectKey])\r\n          }\r\n        })\r\n      }\r\n\r\n      if (typeof this.configs !== 'undefined') {\r\n        Object.keys(this.fConfigs).forEach(objectKey => {\r\n          if (typeof this.configs[objectKey] !== 'undefined') {\r\n            // Get From Configs\r\n            this.$set(this.fConfigs, objectKey, this.configs[objectKey])\r\n          }\r\n        })\r\n      } else {\r\n        Object.keys(this.$props).forEach(objectKey => {\r\n          if (\r\n            typeof this.fConfigs[objectKey] !== 'undefined' &&\r\n            typeof this.$props[objectKey] !== 'undefined'\r\n          ) {\r\n            this.$set(this.fConfigs, objectKey, this.$props[objectKey])\r\n          }\r\n        })\r\n      }\r\n\r\n      // Is Modal\r\n      if (this.fConfigs.isModal) this.showCalendar = false\r\n\r\n      // Placeholder\r\n      if (!this.fConfigs.placeholder)\r\n        this.fConfigs.placeholder = this.fConfigs.dateFormat\r\n\r\n      if (typeof this.newCurrentDate !== 'undefined') {\r\n        this.calendar.currentDate = this.newCurrentDate\r\n      }\r\n\r\n      // Sunday Start\r\n      if (this.fConfigs.sundayStart) {\r\n        let dayNames = [...this.fConfigs.dayNames]\r\n        let sundayName = dayNames[dayNames.length - 1]\r\n        dayNames.splice(dayNames.length - 1, 1)\r\n        dayNames.unshift(sundayName)\r\n        this.fConfigs.dayNames = dayNames\r\n      }\r\n    },\r\n    listRendering() {\r\n      // Each Calendars\r\n      this.listCalendars.forEach(calendar => {\r\n        // Set Calendar Weeks\r\n        calendar.weeks.forEach(week => {\r\n          let finalizedDays = []\r\n\r\n          week.days.forEach(day => {\r\n            let date = new Date(day.year, day.month, day.day)\r\n            let now = new Date()\r\n\r\n            let isToday = false\r\n\r\n            date.setHours(0, 0, 0, 0)\r\n            now.setHours(0, 0, 0, 0)\r\n\r\n            if (date.getTime() === now.getTime()) {\r\n              isToday = true\r\n            }\r\n\r\n            let checkMarked\r\n            // With Custom Classes\r\n            if (typeof this.fConfigs.markedDates[0] === 'object') {\r\n              checkMarked = this.fConfigs.markedDates.find(markDate => {\r\n                return markDate.date === this.helpCalendar.formatDate(date)\r\n              })\r\n            } else {\r\n              // Without Classes\r\n              checkMarked = this.fConfigs.markedDates.find(markDate => {\r\n                return markDate === this.helpCalendar.formatDate(date)\r\n              })\r\n            }\r\n\r\n            if (this.startDMY === this.helpCalendar.formatDate(date)) {\r\n              checkMarked = true\r\n            }\r\n\r\n            let isMarked = false\r\n            if (typeof checkMarked !== 'undefined') {\r\n              isMarked = true\r\n            }\r\n\r\n            finalizedDays.push({\r\n              day: day.day,\r\n              date: this.helpCalendar.formatDate(date),\r\n              hide: day.hide,\r\n              isMouseToLeft: false,\r\n              isMouseToRight: false,\r\n              isHovered: false,\r\n              isDateRangeStart: this.checkDateRangeStart(\r\n                this.helpCalendar.formatDate(date)\r\n              ),\r\n              isDateRangeEnd: this.checkDateRangeEnd(\r\n                this.helpCalendar.formatDate(date)\r\n              ),\r\n              hideLeftAndRightDays: day.hideLeftAndRightDays,\r\n              isToday,\r\n              isMarked\r\n            })\r\n          })\r\n\r\n          week.days = finalizedDays\r\n        })\r\n      })\r\n    },\r\n    clickDay(item, isDisabledDate) {\r\n      if (this.fConfigs.withTimePicker && this.fConfigs.isDateRange) {\r\n        item.date = item.date + ' 00:00'\r\n      }\r\n      this.$emit('dayClicked', item)\r\n\r\n      if (\r\n        !this.fConfigs.isDateRange &&\r\n        !this.fConfigs.isDatePicker &&\r\n        !this.fConfigs.isMultipleDatePicker\r\n      ) {\r\n        return false\r\n      }\r\n\r\n      //Disabled Dates - Start\r\n\r\n      // Disable days of week if set in configuration\r\n      let dateDay = this.helpCalendar.getDateFromFormat(item.date).getDay() - 1\r\n      if (dateDay === -1) {\r\n        dateDay = 6\r\n      }\r\n\r\n      let dayOfWeekString = this.fConfigs.dayNames[dateDay]\r\n      if (\r\n        this.fConfigs.disabledDayNames.includes(dayOfWeekString) ||\r\n        isDisabledDate(item.date)\r\n      ) {\r\n        return false\r\n      }\r\n\r\n      //Disabled Dates - End\r\n\r\n      // Limits\r\n      if (this.fConfigs.limits) {\r\n        let min = this.helpCalendar\r\n          .getDateFromFormat(this.fConfigs.limits.min)\r\n          .getTime()\r\n        let max = this.helpCalendar\r\n          .getDateFromFormat(this.fConfigs.limits.max)\r\n          .getTime()\r\n        let date = this.helpCalendar.getDateFromFormat(item.date).getTime()\r\n\r\n        if (date < min || date > max) {\r\n          return false\r\n        }\r\n      }\r\n\r\n      // Date Multiple Range\r\n      if (this.fConfigs.isMultipleDateRange) {\r\n        let clickDate = this.helpCalendar\r\n          .getDateFromFormat(item.date.split(' ')[0])\r\n          .getTime()\r\n        let rangesLength = this.calendar.multipleDateRange.length\r\n        let lastRange = this.calendar.multipleDateRange[rangesLength - 1]\r\n        let startDate = ''\r\n        // if (lastRange) {\r\n        //   // if (lastRange.start && lastRange.end)\r\n        // } else\r\n\r\n        if (!lastRange) {\r\n          this.calendar.multipleDateRange.push({ end: '', start: '' })\r\n          rangesLength = this.calendar.multipleDateRange.length\r\n          lastRange = this.calendar.multipleDateRange[rangesLength - 1]\r\n        }\r\n\r\n        if (lastRange.start) {\r\n          startDate = this.helpCalendar.getDateFromFormat(lastRange.start)\r\n        }\r\n\r\n        // Two dates is not empty\r\n        if (lastRange.start !== '' && lastRange.end !== '') {\r\n          this.calendar.multipleDateRange.push({ end: '', start: item.date })\r\n          // lastRange.start = item.date\r\n          // lastRange.end = ''\r\n          // Not date selected\r\n        } else if (lastRange.start === '' && lastRange.end === '') {\r\n          lastRange.start = item.date\r\n          // Start Date not empty, chose date > start date\r\n        } else if (lastRange.end === '' && clickDate > startDate.getTime()) {\r\n          lastRange.end = item.date\r\n          // Start date not empty, chose date <= start date (also same date range select)\r\n        } else if (lastRange.start !== '' && clickDate <= startDate.getTime()) {\r\n          this.$nextTick(() => {\r\n            if (this.calendar.withTimePicker) {\r\n              this.$refs['timePicker'].startDateActive = true\r\n            }\r\n          })\r\n          lastRange.end = lastRange.start\r\n          lastRange.start = item.date\r\n        }\r\n\r\n        //Get number of days between date range dates\r\n        if (lastRange.start !== '' && lastRange.end !== '') {\r\n          let oneDay = 24 * 60 * 60 * 1000\r\n          let firstDate = this.helpCalendar.getDateFromFormat(lastRange.start)\r\n          let secondDate = this.helpCalendar.getDateFromFormat(lastRange.end)\r\n          let diffDays = Math.round(\r\n            Math.abs((firstDate.getTime() - secondDate.getTime()) / oneDay)\r\n          )\r\n          let itemTime = this.helpCalendar\r\n            .getDateFromFormat(item.date)\r\n            .getTime()\r\n\r\n          this.$emit('selectedDaysCount', diffDays)\r\n\r\n          // Is Auto Closeable\r\n          if (this.fConfigs.isModal && this.fConfigs.isAutoCloseable) {\r\n            this.showCalendar = false\r\n          }\r\n\r\n          // Minimum Selected Days\r\n          let minSelDays = this.fConfigs.minSelDays\r\n\r\n          if (\r\n            minSelDays &&\r\n            itemTime >= startDate.getTime() &&\r\n            diffDays < minSelDays\r\n          ) {\r\n            startDate.setDate(startDate.getDate() + (minSelDays - 1))\r\n            lastRange.end = this.helpCalendar.formatDate(startDate)\r\n          }\r\n\r\n          if (\r\n            minSelDays &&\r\n            itemTime < startDate.getTime() &&\r\n            diffDays < minSelDays\r\n          ) {\r\n            startDate.setDate(startDate.getDate() - (minSelDays - 1))\r\n            lastRange.start = this.helpCalendar.formatDate(startDate)\r\n          }\r\n\r\n          // Maximum Selected Days\r\n          let maxSelDays = this.fConfigs.maxSelDays\r\n\r\n          if (\r\n            maxSelDays &&\r\n            itemTime >= startDate.getTime() &&\r\n            diffDays >= maxSelDays\r\n          ) {\r\n            startDate.setDate(startDate.getDate() + (maxSelDays - 1))\r\n            lastRange.end = this.helpCalendar.formatDate(startDate)\r\n          }\r\n\r\n          if (\r\n            maxSelDays &&\r\n            itemTime < startDate.getTime() &&\r\n            diffDays >= maxSelDays\r\n          ) {\r\n            startDate.setDate(startDate.getDate() - (maxSelDays - 1))\r\n            lastRange.start = this.helpCalendar.formatDate(startDate)\r\n          }\r\n        }\r\n\r\n        this.$emit('input', this.calendar)\r\n      } // Date Range\r\n      else if (this.fConfigs.isDateRange) {\r\n        let clickDate = this.helpCalendar\r\n          .getDateFromFormat(item.date.split(' ')[0])\r\n          .getTime()\r\n\r\n        let startDate = ''\r\n        if (this.calendar.dateRange.start) {\r\n          startDate = this.helpCalendar.getDateFromFormat(\r\n            this.calendar.dateRange.start\r\n          )\r\n        }\r\n\r\n        // Two dates is not empty\r\n        if (\r\n          this.calendar.dateRange.start !== '' &&\r\n          this.calendar.dateRange.end !== ''\r\n        ) {\r\n          this.calendar.dateRange.start = item.date\r\n          this.calendar.dateRange.end = ''\r\n          // Not date selected\r\n        } else if (\r\n          this.calendar.dateRange.start === '' &&\r\n          this.calendar.dateRange.end === ''\r\n        ) {\r\n          this.calendar.dateRange.start = item.date\r\n          // Start Date not empty, chose date > start date\r\n        } else if (\r\n          this.calendar.dateRange.end === '' &&\r\n          clickDate > startDate.getTime()\r\n        ) {\r\n          this.calendar.dateRange.end = item.date\r\n          // Start date not empty, chose date <= start date (also same date range select)\r\n        } else if (\r\n          this.calendar.dateRange.start !== '' &&\r\n          clickDate <= startDate.getTime()\r\n        ) {\r\n          this.$nextTick(() => {\r\n            if (this.calendar.dateRange && this.calendar.withTimePicker) {\r\n              this.$refs['timePicker'].startDateActive = true\r\n            }\r\n          })\r\n          this.calendar.dateRange.end = this.calendar.dateRange.start\r\n          this.calendar.dateRange.start = item.date\r\n        }\r\n\r\n        //Get number of days between date range dates\r\n        if (\r\n          this.calendar.dateRange.start !== '' &&\r\n          this.calendar.dateRange.end !== ''\r\n        ) {\r\n          let oneDay = 24 * 60 * 60 * 1000\r\n          let firstDate = this.helpCalendar.getDateFromFormat(\r\n            this.calendar.dateRange.start\r\n          )\r\n          let secondDate = this.helpCalendar.getDateFromFormat(\r\n            this.calendar.dateRange.end\r\n          )\r\n          let diffDays = Math.round(\r\n            Math.abs((firstDate.getTime() - secondDate.getTime()) / oneDay)\r\n          )\r\n          let itemTime = this.helpCalendar\r\n            .getDateFromFormat(item.date)\r\n            .getTime()\r\n\r\n          this.$emit('selectedDaysCount', diffDays)\r\n\r\n          // Is Auto Closeable\r\n          if (this.fConfigs.isModal && this.fConfigs.isAutoCloseable) {\r\n            this.showCalendar = false\r\n          }\r\n\r\n          // Minimum Selected Days\r\n          let minSelDays = this.fConfigs.minSelDays\r\n\r\n          if (\r\n            minSelDays &&\r\n            itemTime >= startDate.getTime() &&\r\n            diffDays < minSelDays\r\n          ) {\r\n            startDate.setDate(startDate.getDate() + (minSelDays - 1))\r\n            this.calendar.dateRange.end = this.helpCalendar.formatDate(\r\n              startDate\r\n            )\r\n          }\r\n\r\n          if (\r\n            minSelDays &&\r\n            itemTime < startDate.getTime() &&\r\n            diffDays < minSelDays\r\n          ) {\r\n            startDate.setDate(startDate.getDate() - (minSelDays - 1))\r\n            this.calendar.dateRange.start = this.helpCalendar.formatDate(\r\n              startDate\r\n            )\r\n          }\r\n\r\n          // Maximum Selected Days\r\n          let maxSelDays = this.fConfigs.maxSelDays\r\n\r\n          if (\r\n            maxSelDays &&\r\n            itemTime >= startDate.getTime() &&\r\n            diffDays >= maxSelDays\r\n          ) {\r\n            startDate.setDate(startDate.getDate() + (maxSelDays - 1))\r\n            this.calendar.dateRange.end = this.helpCalendar.formatDate(\r\n              startDate\r\n            )\r\n          }\r\n\r\n          if (\r\n            maxSelDays &&\r\n            itemTime < startDate.getTime() &&\r\n            diffDays >= maxSelDays\r\n          ) {\r\n            startDate.setDate(startDate.getDate() - (maxSelDays - 1))\r\n            this.calendar.dateRange.start = this.helpCalendar.formatDate(\r\n              startDate\r\n            )\r\n          }\r\n        }\r\n\r\n        this.$emit('input', this.calendar)\r\n      } else if (this.fConfigs.isDatePicker) {\r\n        this.calendar.selectedDate = item.date\r\n        this.$emit('input', this.calendar)\r\n\r\n        // Is Auto Closeable\r\n        if (this.fConfigs.isModal && this.fConfigs.isAutoCloseable) {\r\n          this.showCalendar = false\r\n        }\r\n      } else if (this.fConfigs.isMultipleDatePicker) {\r\n        if (\r\n          this.calendar.hasOwnProperty('selectedDates') &&\r\n          this.calendar.selectedDates.find(date => date.date === item.date)\r\n        ) {\r\n          let dateIndex = this.calendar.selectedDates.findIndex(\r\n            date => date.date === item.date\r\n          )\r\n          this.calendar.selectedDates.splice(dateIndex, 1)\r\n        } else {\r\n          let date = Object.assign({}, this.defaultDateFormat)\r\n          date.date = item.date\r\n\r\n          if (!this.calendar.hasOwnProperty('selectedDates')) {\r\n            this.calendar.selectedDates = []\r\n          }\r\n\r\n          this.calendar.selectedDates.push(date)\r\n        }\r\n\r\n        this.$emit('input', this.calendar)\r\n      }\r\n\r\n      this.markChooseDays()\r\n\r\n      // Time Picker\r\n      if (this.fConfigs.withTimePicker) {\r\n        if (this.fConfigs.isDateRange || this.fConfigs.isDatePicker) {\r\n          this.openTimePicker()\r\n        }\r\n\r\n        if (\r\n          this.calendar.selectedDates.find(date => date.date === item.date) &&\r\n          this.fConfigs.isMultipleDatePicker\r\n        ) {\r\n          this.openTimePicker()\r\n        }\r\n      }\r\n\r\n      this.$emit('choseDay', item)\r\n    },\r\n    markChooseDays() {\r\n      let startDate = this.startDMY\r\n      let endDate = this.endDMY\r\n      this.listCalendars.forEach(calendar => {\r\n        calendar.weeks.forEach(week => {\r\n          week.days.forEach(day => {\r\n            day.isMarked = false\r\n            day.date = day.date.split(' ')[0]\r\n            // Date Picker\r\n            if (this.fConfigs.isDatePicker) {\r\n              if (this.calendar.selectedDate === day.date) day.isMarked = true\r\n            } else if (this.fConfigs.isMultipleDatePicker) {\r\n              if (\r\n                this.calendar.hasOwnProperty('selectedDates') &&\r\n                this.calendar.selectedDates.find(date => date.date === day.date)\r\n              )\r\n                day.isMarked = true\r\n            } else {\r\n              day.isMouseToLeft = false\r\n              day.isMouseToRight = false\r\n              // Date Range\r\n              if (startDate === day.date) {\r\n                day.isMouseToLeft = !!endDate\r\n                day.isMarked = true\r\n              }\r\n\r\n              if (endDate === day.date) {\r\n                day.isMouseToRight = !!endDate\r\n                day.isMarked = true\r\n              }\r\n              //Multiple Range\r\n              if (this.calendar.multipleDateRange) {\r\n                if (\r\n                  ~this.calendar.multipleDateRange\r\n                    .map(range => range.start.split(' ')[0])\r\n                    .indexOf(day.date)\r\n                ) {\r\n                  day.isMouseToLeft = !!endDate\r\n                  day.isMarked = true\r\n                }\r\n                if (\r\n                  ~this.calendar.multipleDateRange\r\n                    .map(range => range.end.split(' ')[0])\r\n                    .indexOf(day.date)\r\n                ) {\r\n                  day.isMouseToRight = !!endDate\r\n                  day.isMarked = true\r\n                }\r\n                this.calendar.multipleDateRange.forEach(range => {\r\n                  if (range.start && range.start === range.end) {\r\n                    day.isMouseToLeft = false\r\n                    day.isMouseToRight = false\r\n                  }\r\n                  if (range.start && range.end) {\r\n                    if (\r\n                      this.helpCalendar.getDateFromFormat(day.date).getTime() >\r\n                        this.helpCalendar.getDateFromFormat(range.start) &&\r\n                      this.helpCalendar.getDateFromFormat(day.date) <\r\n                        this.helpCalendar.getDateFromFormat(range.end)\r\n                    ) {\r\n                      day.isMarked = true\r\n                    }\r\n                  }\r\n                })\r\n              }\r\n\r\n              if (startDate && startDate === endDate) {\r\n                day.isMouseToLeft = false\r\n                day.isMouseToRight = false\r\n              }\r\n              if (startDate && endDate) {\r\n                if (\r\n                  this.helpCalendar.getDateFromFormat(day.date).getTime() >\r\n                    this.helpCalendar.getDateFromFormat(startDate) &&\r\n                  this.helpCalendar.getDateFromFormat(day.date) <\r\n                    this.helpCalendar.getDateFromFormat(endDate)\r\n                ) {\r\n                  day.isMarked = true\r\n                }\r\n              }\r\n            }\r\n            if (this.fConfigs.markedDates.includes(day.date))\r\n              day.isMarked = true\r\n          })\r\n        })\r\n      })\r\n    },\r\n    dayMouseOver(date) {\r\n      if (!this.fConfigs.isDateRange) {\r\n        return false\r\n      }\r\n\r\n      // Limits\r\n      if (this.fConfigs.limits) {\r\n        let limitMin = this.helpCalendar\r\n          .getDateFromFormat(this.fConfigs.limits.min)\r\n          .getTime()\r\n        let limitMax = this.helpCalendar\r\n          .getDateFromFormat(this.fConfigs.limits.max)\r\n          .getTime()\r\n        let limitDate = this.helpCalendar.getDateFromFormat(date).getTime()\r\n\r\n        if (limitDate < limitMin || limitDate > limitMax) {\r\n          return false\r\n        }\r\n      }\r\n\r\n      //Multiple Range\r\n\r\n      if (\r\n        (this.calendar.dateRange.start === '' ||\r\n          this.calendar.dateRange.end === '') &&\r\n        (this.calendar.dateRange.start !== '' ||\r\n          this.calendar.dateRange.end !== '')\r\n      ) {\r\n        for (let e = 0; e < this.listCalendars.length; e++) {\r\n          let calendar = this.listCalendars[e]\r\n\r\n          for (let f = 0; f < calendar.weeks.length; f++) {\r\n            let week = calendar.weeks[f]\r\n\r\n            for (let i = 0; i < week.days.length; i++) {\r\n              let item = week.days[i]\r\n\r\n              this.listCalendars[e].weeks[f].days[i].isHovered = false\r\n              if (\r\n                item.date !== this.startDMY &&\r\n                !this.fConfigs.markedDates.includes(item.date)\r\n              ) {\r\n                this.listCalendars[e].weeks[f].days[i].isMarked = false\r\n              }\r\n\r\n              if (this.calendar.dateRange.start) {\r\n                let itemDate = this.helpCalendar\r\n                  .getDateFromFormat(item.date)\r\n                  .getTime()\r\n\r\n                let thisDate = this.helpCalendar\r\n                  .getDateFromFormat(date)\r\n                  .getTime()\r\n                let startDate = this.helpCalendar.getDateFromFormat(\r\n                  this.calendar.dateRange.start\r\n                )\r\n\r\n                this.listCalendars[e].weeks[f].days[i].isMouseToLeft =\r\n                  (itemDate === startDate.getTime() &&\r\n                    thisDate > startDate.getTime()) ||\r\n                  (itemDate === thisDate && thisDate < startDate.getTime())\r\n                this.listCalendars[e].weeks[f].days[i].isMouseToRight =\r\n                  (itemDate === startDate.getTime() &&\r\n                    thisDate < startDate.getTime()) ||\r\n                  (itemDate === thisDate && thisDate > startDate.getTime())\r\n\r\n                let dateDay =\r\n                  this.helpCalendar.getDateFromFormat(item.date).getDay() - 1\r\n                if (dateDay === -1) {\r\n                  dateDay = 6\r\n                }\r\n\r\n                let dayOfWeekString = this.fConfigs.dayNames[dateDay]\r\n                if (\r\n                  !this.fConfigs.disabledDayNames.includes(dayOfWeekString) &&\r\n                  ((itemDate > startDate.getTime() && itemDate < thisDate) ||\r\n                    (itemDate < startDate.getTime() && itemDate > thisDate))\r\n                ) {\r\n                  this.listCalendars[e].weeks[f].days[i].isMarked = true\r\n                }\r\n\r\n                if (!this.calendar.dateRange.end && itemDate === thisDate) {\r\n                  this.listCalendars[e].weeks[f].days[i].isHovered = false\r\n                }\r\n\r\n                if (\r\n                  this.checkSelDates(\r\n                    'min',\r\n                    this.calendar.dateRange.start,\r\n                    item.date,\r\n                    date\r\n                  )\r\n                ) {\r\n                  this.listCalendars[e].weeks[f].days[i].isMarked = true\r\n\r\n                  let minDateToRight, minDateToLeft\r\n                  minDateToLeft = new Date(startDate.getTime())\r\n                  minDateToRight = new Date(startDate.getTime())\r\n                  minDateToLeft.setDate(\r\n                    minDateToLeft.getDate() - this.fConfigs.minSelDays + 1\r\n                  )\r\n                  minDateToRight.setDate(\r\n                    minDateToRight.getDate() + this.fConfigs.minSelDays - 1\r\n                  )\r\n\r\n                  if (\r\n                    thisDate >= minDateToLeft.getTime() &&\r\n                    this.helpCalendar.formatDate(minDateToLeft) === item.date\r\n                  ) {\r\n                    this.listCalendars[e].weeks[f].days[i].isMarked = false\r\n                    this.listCalendars[e].weeks[f].days[i].isMouseToLeft = true\r\n                    this.listCalendars[e].weeks[f].days[i].isHovered = true\r\n                  } else if (\r\n                    thisDate <= minDateToRight.getTime() &&\r\n                    this.helpCalendar.formatDate(minDateToRight) === item.date\r\n                  ) {\r\n                    this.listCalendars[e].weeks[f].days[i].isMarked = false\r\n                    this.listCalendars[e].weeks[f].days[i].isMouseToRight = true\r\n                    this.listCalendars[e].weeks[f].days[i].isHovered = true\r\n                  }\r\n                }\r\n\r\n                if (\r\n                  this.checkSelDates(\r\n                    'max',\r\n                    this.calendar.dateRange.start,\r\n                    item.date,\r\n                    date\r\n                  )\r\n                ) {\r\n                  this.listCalendars[e].weeks[f].days[i].isMarked = false\r\n                  this.listCalendars[e].weeks[f].days[i].isHovered = false\r\n                  this.listCalendars[e].weeks[f].days[i].isMouseToLeft = false\r\n                  this.listCalendars[e].weeks[f].days[i].isMouseToRight = false\r\n\r\n                  let maxDateToLeft, maxDateToRight\r\n                  maxDateToLeft = new Date(startDate.getTime())\r\n                  maxDateToRight = new Date(startDate.getTime())\r\n                  maxDateToLeft.setDate(\r\n                    maxDateToLeft.getDate() - this.fConfigs.maxSelDays + 1\r\n                  )\r\n                  maxDateToRight.setDate(\r\n                    maxDateToRight.getDate() + this.fConfigs.maxSelDays - 1\r\n                  )\r\n\r\n                  if (thisDate <= maxDateToLeft.getTime()) {\r\n                    if (\r\n                      this.helpCalendar.formatDate(maxDateToLeft) === item.date\r\n                    ) {\r\n                      this.listCalendars[e].weeks[f].days[i].isHovered = true\r\n                      this.listCalendars[e].weeks[f].days[\r\n                        i\r\n                      ].isMouseToLeft = true\r\n                    }\r\n                  }\r\n\r\n                  if (thisDate >= maxDateToRight.getTime()) {\r\n                    if (\r\n                      this.helpCalendar.formatDate(maxDateToRight) === item.date\r\n                    ) {\r\n                      this.listCalendars[e].weeks[f].days[i].isHovered = true\r\n                      this.listCalendars[e].weeks[f].days[\r\n                        i\r\n                      ].isMouseToRight = true\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (this.calendar.multipleDateRange) {\r\n        let range = this.calendar.multipleDateRange[\r\n          this.calendar.multipleDateRange.length - 1\r\n        ]\r\n        if (!range) return\r\n        // this.calendar.multipleDateRange.forEach((range, index) => {\r\n        if (\r\n          (range.start === '' || range.end === '') &&\r\n          (range.start !== '' || range.end !== '')\r\n        ) {\r\n          for (let e = 0; e < this.listCalendars.length; e++) {\r\n            let calendar = this.listCalendars[e]\r\n\r\n            for (let f = 0; f < calendar.weeks.length; f++) {\r\n              let week = calendar.weeks[f]\r\n\r\n              for (let i = 0; i < week.days.length; i++) {\r\n                let item = week.days[i]\r\n\r\n                this.listCalendars[e].weeks[f].days[i].isHovered = false\r\n                if (\r\n                  item.date !== this.startDMY &&\r\n                  !this.fConfigs.markedDates.includes(item.date)\r\n                ) {\r\n                  this.listCalendars[e].weeks[f].days[i].isMarked = false\r\n                }\r\n\r\n                if (range.start) {\r\n                  let itemDate = this.helpCalendar\r\n                    .getDateFromFormat(item.date)\r\n                    .getTime()\r\n\r\n                  let thisDate = this.helpCalendar\r\n                    .getDateFromFormat(date)\r\n                    .getTime()\r\n                  let startDate = this.helpCalendar.getDateFromFormat(\r\n                    range.start\r\n                  )\r\n\r\n                  this.listCalendars[e].weeks[f].days[i].isMouseToLeft =\r\n                    (itemDate === startDate.getTime() &&\r\n                      thisDate > startDate.getTime()) ||\r\n                    (itemDate === thisDate && thisDate < startDate.getTime())\r\n                  this.listCalendars[e].weeks[f].days[i].isMouseToRight =\r\n                    (itemDate === startDate.getTime() &&\r\n                      thisDate < startDate.getTime()) ||\r\n                    (itemDate === thisDate && thisDate > startDate.getTime())\r\n\r\n                  let dateDay =\r\n                    this.helpCalendar.getDateFromFormat(item.date).getDay() - 1\r\n                  if (dateDay === -1) {\r\n                    dateDay = 6\r\n                  }\r\n\r\n                  let dayOfWeekString = this.fConfigs.dayNames[dateDay]\r\n                  if (\r\n                    !this.fConfigs.disabledDayNames.includes(dayOfWeekString) &&\r\n                    ((itemDate > startDate.getTime() && itemDate < thisDate) ||\r\n                      (itemDate < startDate.getTime() && itemDate > thisDate))\r\n                  ) {\r\n                    this.listCalendars[e].weeks[f].days[i].isMarked = true\r\n                  }\r\n\r\n                  if (!range.end && itemDate === thisDate) {\r\n                    this.listCalendars[e].weeks[f].days[i].isHovered = false\r\n                  }\r\n\r\n                  if (this.checkSelDates('min', range.start, item.date, date)) {\r\n                    this.listCalendars[e].weeks[f].days[i].isMarked = true\r\n\r\n                    let minDateToRight, minDateToLeft\r\n                    minDateToLeft = new Date(startDate.getTime())\r\n                    minDateToRight = new Date(startDate.getTime())\r\n                    minDateToLeft.setDate(\r\n                      minDateToLeft.getDate() - this.fConfigs.minSelDays + 1\r\n                    )\r\n                    minDateToRight.setDate(\r\n                      minDateToRight.getDate() + this.fConfigs.minSelDays - 1\r\n                    )\r\n\r\n                    if (\r\n                      thisDate >= minDateToLeft.getTime() &&\r\n                      this.helpCalendar.formatDate(minDateToLeft) === item.date\r\n                    ) {\r\n                      this.listCalendars[e].weeks[f].days[i].isMarked = false\r\n                      this.listCalendars[e].weeks[f].days[\r\n                        i\r\n                      ].isMouseToLeft = true\r\n                      this.listCalendars[e].weeks[f].days[i].isHovered = true\r\n                    } else if (\r\n                      thisDate <= minDateToRight.getTime() &&\r\n                      this.helpCalendar.formatDate(minDateToRight) === item.date\r\n                    ) {\r\n                      this.listCalendars[e].weeks[f].days[i].isMarked = false\r\n                      this.listCalendars[e].weeks[f].days[\r\n                        i\r\n                      ].isMouseToRight = true\r\n                      this.listCalendars[e].weeks[f].days[i].isHovered = true\r\n                    }\r\n                  }\r\n\r\n                  if (this.checkSelDates('max', range.start, item.date, date)) {\r\n                    this.listCalendars[e].weeks[f].days[i].isMarked = false\r\n                    this.listCalendars[e].weeks[f].days[i].isHovered = false\r\n                    this.listCalendars[e].weeks[f].days[i].isMouseToLeft = false\r\n                    this.listCalendars[e].weeks[f].days[\r\n                      i\r\n                    ].isMouseToRight = false\r\n\r\n                    let maxDateToLeft, maxDateToRight\r\n                    maxDateToLeft = new Date(startDate.getTime())\r\n                    maxDateToRight = new Date(startDate.getTime())\r\n                    maxDateToLeft.setDate(\r\n                      maxDateToLeft.getDate() - this.fConfigs.maxSelDays + 1\r\n                    )\r\n                    maxDateToRight.setDate(\r\n                      maxDateToRight.getDate() + this.fConfigs.maxSelDays - 1\r\n                    )\r\n\r\n                    if (thisDate <= maxDateToLeft.getTime()) {\r\n                      if (\r\n                        this.helpCalendar.formatDate(maxDateToLeft) ===\r\n                        item.date\r\n                      ) {\r\n                        this.listCalendars[e].weeks[f].days[i].isHovered = true\r\n                        this.listCalendars[e].weeks[f].days[\r\n                          i\r\n                        ].isMouseToLeft = true\r\n                      }\r\n                    }\r\n\r\n                    if (thisDate >= maxDateToRight.getTime()) {\r\n                      if (\r\n                        this.helpCalendar.formatDate(maxDateToRight) ===\r\n                        item.date\r\n                      ) {\r\n                        this.listCalendars[e].weeks[f].days[i].isHovered = true\r\n                        this.listCalendars[e].weeks[f].days[\r\n                          i\r\n                        ].isMouseToRight = true\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        // })\r\n      }\r\n    },\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    PreMonth(calendarKey = null) {\r\n      if (!this.allowPreDate) return false\r\n\r\n      this.transitionPrefix = 'right'\r\n\r\n      calendarKey = calendarKey !== null ? calendarKey : 0\r\n\r\n      let currentCalendar = this.listCalendars[calendarKey]\r\n      currentCalendar.date = new Date(\r\n        currentCalendar.date.getFullYear(),\r\n        currentCalendar.date.getMonth() - 1\r\n      )\r\n      currentCalendar.key -= hUniqueID()\r\n      this.updateCalendar()\r\n\r\n      if (!this.fConfigs.isSeparately) {\r\n        this.calendar.currentDate = currentCalendar.date\r\n        this.initCalendar()\r\n      }\r\n\r\n      this.$emit('changedMonth', currentCalendar.date)\r\n    },\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    NextMonth(calendarKey = null) {\r\n      if (!this.allowNextDate) return false\r\n\r\n      this.transitionPrefix = 'left'\r\n\r\n      calendarKey = calendarKey !== null ? calendarKey : 0\r\n\r\n      let currentCalendar = this.listCalendars[calendarKey]\r\n      currentCalendar.date = new Date(\r\n        currentCalendar.date.getFullYear(),\r\n        currentCalendar.date.getMonth() + 1\r\n      )\r\n      currentCalendar.key += hUniqueID()\r\n      this.updateCalendar()\r\n\r\n      if (!this.fConfigs.isSeparately) {\r\n        this.calendar.currentDate = currentCalendar.date\r\n        this.initCalendar()\r\n      }\r\n\r\n      this.$emit('changedMonth', currentCalendar.date)\r\n    },\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    PreYear(calendarKey = null) {\r\n      if (!this.allowPreDate) return false\r\n\r\n      let step = this.showYearPicker ? this.fConfigs.changeYearStep : 1\r\n\r\n      calendarKey = calendarKey !== null ? calendarKey : 0\r\n\r\n      let currentCalendar = this.listCalendars[calendarKey]\r\n      currentCalendar.date = new Date(\r\n        currentCalendar.date.getFullYear() - step,\r\n        currentCalendar.date.getMonth()\r\n      )\r\n      this.updateCalendar()\r\n\r\n      if (!this.fConfigs.isSeparately) {\r\n        this.calendar.currentDate = currentCalendar.date\r\n        this.initCalendar()\r\n      }\r\n\r\n      this.$emit('changedYear', currentCalendar.date)\r\n    },\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    NextYear(calendarKey = null) {\r\n      if (!this.allowNextDate) return false\r\n\r\n      let step = this.showYearPicker ? this.fConfigs.changeYearStep : 1\r\n\r\n      calendarKey = calendarKey !== null ? calendarKey : 0\r\n\r\n      let currentCalendar = this.listCalendars[calendarKey]\r\n      currentCalendar.date = new Date(\r\n        currentCalendar.date.getFullYear() + step,\r\n        currentCalendar.date.getMonth()\r\n      )\r\n      this.updateCalendar()\r\n\r\n      if (!this.fConfigs.isSeparately) {\r\n        this.calendar.currentDate = currentCalendar.date\r\n        this.initCalendar()\r\n      }\r\n\r\n      this.$emit('changedYear', currentCalendar.date)\r\n    },\r\n    ChooseDate(date) {\r\n      let newDate = this.helpCalendar.getDateFromFormat(date)\r\n\r\n      if (date === 'today') {\r\n        newDate = new Date()\r\n      }\r\n\r\n      this.listCalendars[0].date = this.calendar.currentDate = newDate\r\n\r\n      this.updateCalendar()\r\n      this.initCalendar()\r\n    },\r\n    openMonthPicker(key) {\r\n      if (this.fConfigs.changeMonthFunction) {\r\n        this.showMonthPicker = key === this.showMonthPicker ? false : key\r\n        this.showYearPicker = false\r\n      }\r\n    },\r\n    openYearPicker(key) {\r\n      if (this.fConfigs.changeYearFunction) {\r\n        this.showYearPicker = key === this.showYearPicker ? false : key\r\n        this.showMonthPicker = false\r\n      }\r\n    },\r\n    openTimePicker() {\r\n      this.showTimePicker = true\r\n    },\r\n    pickMonth(key, calendarKey) {\r\n      this.showMonthPicker = false\r\n      if (!this.isSeparately) {\r\n        this.listCalendars.forEach((currentCalendar, index) => {\r\n          let date = currentCalendar.date\r\n          currentCalendar.date = new Date(\r\n            date.getFullYear(),\r\n            key + 1 + index,\r\n            0\r\n          )\r\n          currentCalendar.key += hUniqueID()\r\n        })\r\n      } else {\r\n        let currentCalendar = this.listCalendars[calendarKey]\r\n        let date = currentCalendar.date\r\n        currentCalendar.date = new Date(date.getFullYear(), key + 1, 0)\r\n        currentCalendar.key += hUniqueID()\r\n      }\r\n      this.updateCalendar()\r\n    },\r\n    pickYear(year, calendarKey) {\r\n      this.showYearPicker = false\r\n      if (!this.isSeparately) {\r\n        this.listCalendars.forEach(currentCalendar => {\r\n          let date = currentCalendar.date\r\n          currentCalendar.date = new Date(year, date.getMonth() + 1, 0)\r\n          currentCalendar.key += hUniqueID()\r\n        })\r\n      } else {\r\n        let currentCalendar = this.listCalendars[calendarKey]\r\n        let date = currentCalendar.date\r\n        currentCalendar.date = new Date(year, date.getMonth() + 1, 0)\r\n        currentCalendar.key += hUniqueID()\r\n      }\r\n      this.updateCalendar()\r\n    },\r\n    getYearList(date, delta) {\r\n      let years = []\r\n      let year = date.getFullYear() - 4 + delta\r\n      for (let i = 0; i < 12; i++) {\r\n        let finalYear = year + i\r\n\r\n        years.push({\r\n          year: finalYear\r\n        })\r\n      }\r\n      return years\r\n    },\r\n    /**\r\n     * Add date to selectedDates list\r\n     * @param index\r\n     */\r\n    addToSelectedDates() {\r\n      if (this.helpCalendar.checkValidDate(this.calendar.selectedDatesItem)) {\r\n        let date = Object.assign({}, this.defaultDateFormat)\r\n        date.date = this.calendar.selectedDatesItem\r\n        this.calendar.selectedDates.push(date)\r\n        this.calendar.selectedDatesItem = ''\r\n        this.markChooseDays()\r\n      }\r\n    },\r\n    /**\r\n     * Remove date from selectedDates list\r\n     * @param index\r\n     */\r\n    removeFromSelectedDates(index) {\r\n      this.calendar.selectedDates.splice(index, 1)\r\n      this.markChooseDays()\r\n    },\r\n\r\n    checkDateRangeEnd(date) {\r\n      if (Array.isArray(this.fConfigs.markedDateRange)) {\r\n        return (\r\n          this.fConfigs.markedDateRange.findIndex(range => {\r\n            return range.end === date\r\n          }) !== -1\r\n        )\r\n      }\r\n\r\n      return date === this.fConfigs.markedDateRange.end\r\n    },\r\n    checkSelDates(type, startDate, itemDate, hoverDate) {\r\n      let startTime = this.helpCalendar.getDateFromFormat(startDate).getTime()\r\n      let itemTime = this.helpCalendar.getDateFromFormat(itemDate).getTime()\r\n      let hoverTime = this.helpCalendar.getDateFromFormat(hoverDate).getTime()\r\n\r\n      let days =\r\n        type === 'min' ? this.fConfigs.minSelDays : this.fConfigs.maxSelDays - 2\r\n      let minTime = days * 1000 * 60 * 60 * 24\r\n      let rightTime = startTime + minTime\r\n      let leftTime = startTime - minTime\r\n\r\n      let result\r\n      if (hoverTime > startTime) {\r\n        if (type === 'min')\r\n          result =\r\n            itemTime < rightTime &&\r\n            itemTime > startTime &&\r\n            this.fConfigs.minSelDays\r\n        else\r\n          result =\r\n            itemTime > rightTime &&\r\n            itemTime > startTime &&\r\n            this.fConfigs.maxSelDays\r\n      } else if (hoverTime < startTime) {\r\n        if (type === 'min')\r\n          result =\r\n            itemTime > leftTime &&\r\n            itemTime < startTime &&\r\n            this.fConfigs.minSelDays\r\n        else\r\n          result =\r\n            itemTime < leftTime &&\r\n            itemTime < startTime &&\r\n            this.fConfigs.maxSelDays\r\n      }\r\n\r\n      return result\r\n    },\r\n    checkLimits(value) {\r\n      if (this.fConfigs.limits) {\r\n        let min = new Date(\r\n          this.helpCalendar.getDateFromFormat(this.fConfigs.limits.min)\r\n        )\r\n        min.setDate(1)\r\n        min.setHours(0, 0, 0, 0)\r\n        let max = new Date(\r\n          this.helpCalendar.getDateFromFormat(this.fConfigs.limits.max)\r\n        )\r\n        max.setDate(1)\r\n        max.setHours(0, 0, 0, 0)\r\n\r\n        this.allowPreDate = true\r\n        this.allowNextDate = true\r\n\r\n        let current = new Date(value)\r\n        current.setDate(1)\r\n        current.setHours(0, 0, 0, 0)\r\n\r\n        if (current <= min) {\r\n          this.allowPreDate = false\r\n        }\r\n\r\n        if (current >= max) {\r\n          this.allowNextDate = false\r\n        }\r\n      }\r\n    },\r\n    getTransition_() {\r\n      if (!this.fConfigs.transition) return ''\r\n\r\n      let name = ''\r\n      if (this.transitionPrefix === 'left') {\r\n        name = 'vfc-calendar-slide-left'\r\n      } else if (this.transitionPrefix === 'right') {\r\n        name = 'vfc-calendar-slide-right'\r\n      }\r\n      return name\r\n    },\r\n    checkHiddenElement(elementName) {\r\n      return !this.fConfigs.hiddenElements.includes(elementName)\r\n    },\r\n    onFocusIn() {\r\n      if (this.fConfigs.isModal) {\r\n        this.showCalendar = true\r\n      }\r\n    },\r\n    onFocusOut(e) {\r\n      if (\r\n        this.fConfigs.isModal &&\r\n        !hElContains(this.popoverElement, e.relatedTarget)\r\n      ) {\r\n        return (this.showCalendar = this.showMonthPicker = this.showYearPicker = false)\r\n      }\r\n    },\r\n\r\n    hideMonthYearPicker(e) {\r\n      this.$nextTick(() => {\r\n        if (this.showMonthPicker || this.showYearPicker) {\r\n          let key = this.showMonthPicker\r\n            ? this.showMonthPicker - 1\r\n            : this.showYearPicker - 1\r\n\r\n          const MYactive = this.$refs.calendars.querySelectorAll(\r\n            `.vfc-content-MY-picker`\r\n          )[key]\r\n          if (MYactive.contains(e.target)) {\r\n            return\r\n          }\r\n          return (this.showMonthPicker = this.showYearPicker = false)\r\n        }\r\n      })\r\n    },\r\n\r\n    checkDateRangeStart(date) {\r\n      if (Array.isArray(this.fConfigs.markedDateRange)) {\r\n        return (\r\n          this.fConfigs.markedDateRange.findIndex(range => {\r\n            return range.start === date\r\n          }) !== -1\r\n        )\r\n      }\r\n\r\n      return date === this.fConfigs.markedDateRange.start\r\n    },\r\n    cleanRange() {\r\n      if (!this.isMultipleDateRange) {\r\n        this.calendar.dateRange.end = ''\r\n        this.calendar.dateRange.start = ''\r\n        return\r\n      }\r\n      this.calendar.multipleDateRange = []\r\n      // this.calendar.multipleDateRange.push({\r\n      //   start: '',\r\n      //   end: ''\r\n      // })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '../assets/scss/calendar.scss';\r\n.rangeCleaner {\r\n  padding: 5px 0 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  span {\r\n    color: white;\r\n    border-radius: 5px;\r\n    border: none;\r\n    padding: 5px;\r\n    &.active {\r\n      &:hover {\r\n        background-color: #4f8a9e;\r\n        cursor: pointer;\r\n      }\r\n      background-color: #66b3cc;\r\n    }\r\n    &.disabled {\r\n      background-color: rgb(148, 148, 148);\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}
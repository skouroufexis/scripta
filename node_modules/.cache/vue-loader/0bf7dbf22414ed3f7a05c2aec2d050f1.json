{"remainingRequest":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/stavros/Documents/web/diary/src/components/Calendar.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/stavros/Documents/web/diary/src/components/Calendar.vue","mtime":1611262265761},{"path":"/Users/stavros/Documents/web/diary/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojY2FsZW5kYXIge2NvbG9yOiBkYXJrY3lhbjt9Cgo="},{"version":3,"sources":["Calendar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwMA","file":"Calendar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        \n        <!-- <DatePicker \n          mode='date'\n          v-model=\"date\"\n          \n\n        >  -->\n        \n         <Calendar id=\"calendar\"\n           v-bind:attributes='attributes'\n           v-bind:calendar='calendar'\n           \n         /> \n        \n\n    \n    </div>    \n\n\n    \n</template>\n\n\n\n<script>\n\nimport Calendar from 'v-calendar/lib/components/calendar.umd';\n// import DatePicker from 'v-calendar/lib/components/date-picker.umd';\n\n// let today = new Date(); \nexport default {\n    name:'Calendario',\n    components:{Calendar},\n    \n    data:function() {\n    return {  \n      \n      calendarMonth:'',\n    }\n  },\n  \n  watch:{\n\n    //sets event listener on calendar days every time the month displayed changes\n    calendarMonth:function(){\n      \n      this.calendarMounts();\n    }\n  },\n\n  mounted(){\n\n      //set the calendarMonth value for the first time\n      this.updateMonth();\n\n      //add event listener on navigation arrows (updates calendarMonth)\n      let arrows=document.getElementsByClassName('vc-arrow');\n      arrows.forEach((arrow)=>{\n        arrow.addEventListener('click',this.updateMonth);    \n\n      });\n\n      //add event listener on the rest of the navigation buttons (updates calendarMonth)\n      let gridCells=document.getElementsByClassName('vc-grid-cell');\n      gridCells.forEach(gc=>{\n      gc.addEventListener('click',this.updateMonth);\n      });\n   \n    //set event listener for the calendar days (will update the selected date)\n    this.calendarMounts();\n    \n    \n },\n\n  props:['months','title'],\n\n  methods:{\n\n    //updates the calendarMonth with the currently showing month\n    //When the month changes, a watcher will be used to set an event listener\n    //on the days, which will trigger the function to update the selected date\n\n     updateMonth:function(){\n      let gridCells=document.getElementsByClassName('vc-grid-cell');\n      gridCells.forEach(gc=>{\n      gc.addEventListener('click',this.updateMonth);\n      });\n       \n       //check the month row to see if the month changed => update calendarMonth\n       setTimeout(() => {\n         let title=document.getElementsByClassName('vc-title');\n         let month=title[0].innerHTML;\n         this.calendarMonth=month;\n       }, 800);\n\n     },\n\n    //sets event listeners on each day for calling selectDay() which updates the selected date\n    calendarMounts:function(){\n\n    // retrieve today's day\n    let fullDate=document.getElementById('day').innerHTML;\n    let splitDate=fullDate.split(' ');\n    \n    let day=splitDate[0];\n    let month=splitDate[1];\n    let year = splitDate[2];\n\n    //remove 0 from days 01-09 of the month\n    let splitDay=day.split('');\n        if(splitDate[0]=='0')\n          {\n            day=splitDay[1];\n          }\n\n  \n   //retrieve showing Month & Year of calendar\n   let monthYear=this.calendarMonth;\n       monthYear=monthYear.split(' ');\n   let cMonth=monthYear[0];\n       cMonth=cMonth.substring(0,3);\n   let cYear = monthYear[1];\n\n   //retrieve day container\n   let days=document.getElementsByClassName('vc-day'); \n   days.forEach(d=>{\n     let child =d.childNodes;\n     let dayContainer=child[0];\n    \n     //add focus to selected day \n     if(dayContainer.innerHTML==day && cMonth==month && cYear==year)\n        {\n          dayContainer.style.backgroundColor='rgba(0,130,139,0.1)';\n        }\n     \n     //add event listener on calendar days  \n     dayContainer.addEventListener('click',()=>{\n       this.selectDay(days,dayContainer);\n     } )\n     \n   })\n\n\n  },\n\n    selectDay:function(days,dayContainer){\n      //month names\n      let months=this.months;\n      \n      // remove focus from non-selected days\n      days.forEach(d=>{\n     let child =d.childNodes;\n     let container=child[0];\n      container.style.backgroundColor='white';\n     } );\n\n     //highlight selected day\n       dayContainer.style.backgroundColor='rgba(0,130,139,0.1)';\n       \n\n     //change the date if another day was selected\n    let monthYear=document.getElementsByClassName('vc-title');\n    monthYear=monthYear[0].innerHTML.split(' ');\n\n    //get month name & trim it to 3 characters\n    let newMonth=monthYear[0];\n        newMonth=newMonth.substring(0,3);\n\n        //get newMonth as number\n        months.forEach((m,index)=>{\n          if(m==newMonth)\n            {\n              newMonth=index;\n            }\n        });\n    \n    //get year\n    let newYear=monthYear[1];\n    \n    //get day\n    let newDay=dayContainer.innerHTML;\n    //set new Date\n    let newDate=new Date(newYear,newMonth,newDay);\n\n    this.$emit('updateToday',newDate);\n    }\n  },\n    \n    \n}\n\n  \n</script>\n\n\n\n<style>\n\n#calendar {color: darkcyan;}\n\n</style>"]}]}
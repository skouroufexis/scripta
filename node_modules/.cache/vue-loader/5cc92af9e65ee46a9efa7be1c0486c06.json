{"remainingRequest":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/stavros/Documents/web/diary/node_modules/vue-functional-calendar/src/components/TimePicker.vue?vue&type=style&index=0&id=5a4f42f8&scoped=true&lang=scss&","dependencies":[{"path":"/Users/stavros/Documents/web/diary/node_modules/vue-functional-calendar/src/components/TimePicker.vue","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stavros/Documents/web/diary/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLnZmYy10aW1lLXBpY2tlci1jb250YWluZXIgew0KICBtaW4td2lkdGg6IDI1MHB4Ow0KICAudmZjLW1vZGFsLXRpbWUtbGluZSB7DQogICAgPiBzcGFuIHsNCiAgICAgID4gc3Bhbjpub3QoOm50aC1jaGlsZCgyKSk6bm90KC52ZmMtYWN0aXZlKTpob3ZlciB7DQogICAgICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICAgIH0NCiAgICB9DQogIH0NCiAgLnRpdGxlcyB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBwYWRkaW5nOiAxMHB4IDA7DQogICAgPiBkaXYgew0KICAgICAgZmxleDogMTsNCiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICAgIGNvbG9yOiAjNjZiM2NjOw0KICAgICAgd29yZC1icmVhazogYnJlYWstYWxsOw0KICAgICAgZm9udC1zaXplOiAyNXB4Ow0KICAgIH0NCiAgfQ0KICAudmZjLXRpbWUtcGlja2VyIHsNCiAgICBwYWRkaW5nLWJvdHRvbTogMjBweDsNCiAgfQ0KfQ0K"},{"version":3,"sources":["TimePicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TimePicker.vue","sourceRoot":"node_modules/vue-functional-calendar/src/components","sourcesContent":["<template>\r\n  <div class=\"vfc-time-picker-container\">\r\n    <div class=\"vfc-close\" @click=\"close()\"></div>\r\n    <div class=\"vfc-modal-time-mechanic\">\r\n      <div id=\"time-line\" class=\"vfc-modal-time-line\">\r\n        <span>\r\n          <template v-if=\"$parent.fConfigs.isDateRange\">\r\n            <span\r\n              @click=\"startDateActive = true\"\r\n              :class=\"{ 'vfc-active': startDateActive }\"\r\n              >{{ $parent.calendar.dateRange.start }}</span\r\n            >\r\n            <template v-if=\"$parent.calendar.dateRange.end\">\r\n              <span>-</span>\r\n              <span\r\n                @click=\"startDateActive = false\"\r\n                :class=\"{ 'vfc-active': !startDateActive }\"\r\n                >{{ $parent.calendar.dateRange.end }}</span\r\n              >\r\n            </template>\r\n          </template>\r\n          <template v-else-if=\"$parent.fConfigs.isMultipleDatePicker\">{{\r\n            getCurrentDateTime\r\n          }}</template>\r\n          <template v-else>{{ $parent.calendar.selectedDateTime }}</template>\r\n        </span>\r\n      </div>\r\n      <div class=\"titles\">\r\n        <div>Hour</div>\r\n        <div>Minute</div>\r\n      </div>\r\n      <div class=\"vfc-time-picker\">\r\n        <div\r\n          class=\"vfc-time-picker__list vfc-time-picker__list--hours\"\r\n          ref=\"hourList\"\r\n        >\r\n          <div\r\n            class=\"vfc-time-picker__item\"\r\n            :class=\"{\r\n              'vfc-time-picker__item--selected': checkHourActiveClass(i)\r\n            }\"\r\n            v-for=\"i in 24\"\r\n            :key=\"i\"\r\n            @click=\"changeHour(formatTime(i))\"\r\n          >\r\n            {{ formatTime(i) }}\r\n          </div>\r\n        </div>\r\n        <div\r\n          class=\"vfc-time-picker__list vfc-time-picker__list--minutes\"\r\n          ref=\"minuteList\"\r\n        >\r\n          <div\r\n            class=\"vfc-time-picker__item\"\r\n            :class=\"{\r\n              'vfc-time-picker__item--selected': checkMinuteActiveClass(i)\r\n            }\"\r\n            v-for=\"i in 60\"\r\n            :key=\"i\"\r\n            @click=\"changeMinute(formatTime(i))\"\r\n          >\r\n            {{ formatTime(i) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TimePicker',\r\n  data() {\r\n    return {\r\n      startDateActive: true,\r\n      currentSelectedDate: ''\r\n    }\r\n  },\r\n  props: {\r\n    height: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  watch: {\r\n    startDateActive: function() {\r\n      this.setScrollPosition()\r\n    }\r\n  },\r\n  computed: {\r\n    getCurrentDate() {\r\n      return this.currentSelectedDate.date\r\n    },\r\n    getCurrentDateTime() {\r\n      return this.currentSelectedDate.dateTime\r\n    }\r\n  },\r\n  created() {\r\n    let selectedDates = this.$parent.calendar.selectedDates\r\n    this.currentSelectedDate = selectedDates[selectedDates.length - 1]\r\n  },\r\n  mounted() {\r\n    let startDate = this.$parent.calendar.dateRange.start.split(' ')[0]\r\n    let endDate = this.$parent.calendar.dateRange.end.split(' ')[0]\r\n    if (\r\n      startDate &&\r\n      this.$parent.helpCalendar.getDateFromFormat(startDate) <\r\n        this.$parent.helpCalendar.getDateFromFormat(endDate)\r\n    ) {\r\n      this.startDateActive = false\r\n    } else {\r\n      this.startDateActive = true\r\n    }\r\n\r\n    this.setSelectedDateTime()\r\n    this.setStyles()\r\n  },\r\n  methods: {\r\n    formatTime(i) {\r\n      return i <= 10 ? '0' + (i - 1) : i - 1\r\n    },\r\n    close() {\r\n      this.$parent.showTimePicker = false\r\n    },\r\n    addMinuteHour(what, val, to) {\r\n      let res = ''\r\n      res += val.split(' ')[0]\r\n      if (what == 'hour') {\r\n        res += ' ' + to + ':'\r\n        res += val.split(' ')[1].split(':')[1]\r\n      } else {\r\n        res += ' ' + val.split(' ')[1].split(':')[0] + ':'\r\n        res += to\r\n      }\r\n      return res\r\n    },\r\n    changeHour(hour) {\r\n      if (this.$parent.fConfigs.isDateRange) {\r\n        if (this.checkStartDate()) {\r\n          this.$parent.calendar.dateRange.start = this.addMinuteHour(\r\n            'hour',\r\n            this.$parent.calendar.dateRange.start,\r\n            hour\r\n          )\r\n        } else {\r\n          this.$parent.calendar.dateRange.end = this.addMinuteHour(\r\n            'hour',\r\n            this.$parent.calendar.dateRange.end,\r\n            hour\r\n          )\r\n        }\r\n      } else if (this.$parent.fConfigs.isMultipleDatePicker) {\r\n        let currentDate = this.$parent.calendar.selectedDates.find(\r\n          date => date.date === this.getCurrentDate\r\n        )\r\n        currentDate.hour = hour\r\n      } else {\r\n        this.$parent.calendar.selectedHour = hour\r\n      }\r\n\r\n      this.setSelectedDateTime()\r\n      this.setScrollPosition()\r\n    },\r\n    changeMinute(minute) {\r\n      if (this.$parent.fConfigs.isDateRange) {\r\n        if (this.checkStartDate()) {\r\n          this.$parent.calendar.dateRange.start = this.addMinuteHour(\r\n            'minute',\r\n            this.$parent.calendar.dateRange.start,\r\n            minute\r\n          )\r\n        } else {\r\n          this.$parent.calendar.dateRange.end = this.addMinuteHour(\r\n            'minute',\r\n            this.$parent.calendar.dateRange.end,\r\n            minute\r\n          )\r\n        }\r\n      } else if (this.$parent.fConfigs.isMultipleDatePicker) {\r\n        let currentDate = this.$parent.calendar.selectedDates.find(\r\n          date => date.date === this.getCurrentDate\r\n        )\r\n        currentDate.minute = minute\r\n      } else {\r\n        this.$parent.calendar.selectedMinute = minute\r\n      }\r\n\r\n      this.setSelectedDateTime()\r\n      this.setScrollPosition()\r\n    },\r\n    setSelectedDateTime() {\r\n      if (this.$parent.fConfigs.isDatePicker) {\r\n        this.$parent.calendar.selectedDateTime =\r\n          this.$parent.calendar.selectedDate +\r\n          ' ' +\r\n          this.$parent.calendar.selectedHour +\r\n          ':' +\r\n          this.$parent.calendar.selectedMinute\r\n      } else if (this.$parent.fConfigs.isMultipleDatePicker) {\r\n        let currentDate = this.$parent.calendar.selectedDates.find(\r\n          date => date.date === this.getCurrentDate\r\n        )\r\n        currentDate.dateTime =\r\n          currentDate.date + ' ' + currentDate.hour + ':' + currentDate.minute\r\n      }\r\n    },\r\n    checkStartDate() {\r\n      return this.startDateActive\r\n    },\r\n    checkHourActiveClass(i) {\r\n      let hour\r\n      if (this.$parent.fConfigs.isDateRange) {\r\n        if (this.checkStartDate()) {\r\n          hour = this.$parent.calendar.dateRange.start\r\n            .split(' ')[1]\r\n            .split(':')[0]\r\n        } else {\r\n          hour = this.$parent.calendar.dateRange.end.split(' ')[1].split(':')[0]\r\n        }\r\n      } else if (this.$parent.fConfigs.isMultipleDatePicker) {\r\n        hour = this.$parent.calendar.selectedDates.find(\r\n          date => date.date === this.getCurrentDate\r\n        ).hour\r\n      } else {\r\n        hour = this.$parent.calendar.selectedHour\r\n      }\r\n      return hour == this.formatTime(i)\r\n    },\r\n    checkMinuteActiveClass(i) {\r\n      let minute\r\n      if (this.$parent.fConfigs.isDateRange) {\r\n        if (this.checkStartDate()) {\r\n          minute = this.$parent.calendar.dateRange.start.split(':')[1]\r\n        } else {\r\n          minute = this.$parent.calendar.dateRange.end.split(':')[1]\r\n        }\r\n      } else if (this.$parent.fConfigs.isMultipleDatePicker) {\r\n        minute = this.$parent.calendar.selectedDates.find(\r\n          date => date.date === this.getCurrentDate\r\n        ).minute\r\n      } else {\r\n        minute = this.$parent.calendar.selectedMinute\r\n      }\r\n\r\n      return minute == this.formatTime(i)\r\n    },\r\n    setStyles() {\r\n      //let container = this.$parent.$refs.mainContainer\r\n\r\n      this.setScrollPosition()\r\n\r\n      let timeLineHeight = +this.height - 35 - 85 // - paddings - titles height\r\n      document.getElementsByClassName('vfc-time-picker__list')[0].style.height =\r\n        timeLineHeight + 'px'\r\n      document.getElementsByClassName('vfc-time-picker__list')[1].style.height =\r\n        timeLineHeight + 'px'\r\n    },\r\n    setScrollPosition() {\r\n      let container = this.$parent.$refs.mainContainer\r\n\r\n      this.$nextTick(function() {\r\n        const selectedHour = this.$refs.hourList.querySelector(\r\n          '.vfc-time-picker__item--selected'\r\n        )\r\n        const selectedMinute = this.$refs.minuteList.querySelector(\r\n          '.vfc-time-picker__item--selected'\r\n        )\r\n\r\n        this.$refs.hourList.scrollTop = selectedHour\r\n          ? selectedHour.offsetTop - container.clientHeight / 2\r\n          : 0\r\n        this.$refs.minuteList.scrollTop = selectedMinute\r\n          ? selectedMinute.offsetTop - container.clientHeight / 2\r\n          : 0\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.vfc-time-picker-container {\r\n  min-width: 250px;\r\n  .vfc-modal-time-line {\r\n    > span {\r\n      > span:not(:nth-child(2)):not(.vfc-active):hover {\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n  .titles {\r\n    display: flex;\r\n    padding: 10px 0;\r\n    > div {\r\n      flex: 1;\r\n      text-align: center;\r\n      color: #66b3cc;\r\n      word-break: break-all;\r\n      font-size: 25px;\r\n    }\r\n  }\r\n  .vfc-time-picker {\r\n    padding-bottom: 20px;\r\n  }\r\n}\r\n</style>\r\n"]}]}